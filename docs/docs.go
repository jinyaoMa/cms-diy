// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Github Issues",
            "url": "https://github.com/jinyaoMa/cms-diy/issues"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/jinyaoMa/cms-diy/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/extendTokenExpireTime": {
            "get": {
                "security": [
                    {
                        "BearerIdAuth": []
                    }
                ],
                "description": "Make up a new token to extend expire time",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "After Authorization"
                ],
                "summary": "ExtendTokenExpireTime",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"success\":true,\"data\":{\"token\":\"\"}}",
                        "schema": {
                            "$ref": "#/definitions/router.Json200Response"
                        }
                    },
                    "500": {
                        "description": "Token generating error"
                    }
                }
            }
        },
        "/api/getFileList": {
            "get": {
                "security": [
                    {
                        "BearerIdAuth": []
                    }
                ],
                "description": "Get file list of user space",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "After Authorization"
                ],
                "summary": "GetFileList",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Depth",
                        "name": "depth",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"success\":true,\"data\":{\"files\":[]}",
                        "schema": {
                            "$ref": "#/definitions/router.Json200Response"
                        }
                    },
                    "400": {
                        "description": "GetFileListQuery binding error"
                    },
                    "404": {
                        "description": "{\"error\":\"error msg\"}",
                        "schema": {
                            "$ref": "#/definitions/router.Json404Response"
                        }
                    },
                    "500": {
                        "description": "Token generating error"
                    }
                }
            }
        },
        "/api/test": {
            "get": {
                "security": [
                    {
                        "BearerIdAuth": []
                    }
                ],
                "description": "Test Token",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "After Authorization"
                ],
                "summary": "Test",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"success\":true,\"data\":{\"user\":\"admin\",\"isTokenValid\":true}}",
                        "schema": {
                            "$ref": "#/definitions/router.Json200Response"
                        }
                    },
                    "500": {
                        "description": "Token generating error"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login with account and password",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Before Authorization"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account",
                        "name": "account",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"success\":true,\"data\":{\"userid\":1,\"username\":\"cms-diy\",\"role\":\"admin\",\"permission\":\"*\",\"token\":\"\"}}",
                        "schema": {
                            "$ref": "#/definitions/router.Json200Response"
                        }
                    },
                    "400": {
                        "description": "LoginForm binding error"
                    },
                    "404": {
                        "description": "{\"error\":\"error msg\"}",
                        "schema": {
                            "$ref": "#/definitions/router.Json404Response"
                        }
                    },
                    "500": {
                        "description": "Token generating error"
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Signup as a new user with role by invitation code",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Before Authorization"
                ],
                "summary": "Signup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account",
                        "name": "account",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Invitation Code",
                        "name": "code",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"success\":true,\"data\":{\"userid\":1,\"username\":\"cms-diy\",\"role\":\"admin\",\"permission\":\"*\",\"token\":\"\"}}",
                        "schema": {
                            "$ref": "#/definitions/router.Json200Response"
                        }
                    },
                    "400": {
                        "description": "SignupForm binding error"
                    },
                    "404": {
                        "description": "{\"error\":\"error msg\"}",
                        "schema": {
                            "$ref": "#/definitions/router.Json404Response"
                        }
                    },
                    "500": {
                        "description": "Token generating error"
                    }
                }
            }
        }
    },
    "definitions": {
        "router.Json200Response": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/router.JsonObject"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "router.Json404Response": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "router.JsonObject": {
            "type": "object",
            "additionalProperties": true
        }
    },
    "securityDefinitions": {
        "BearerIdAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.1",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "CMS_DIY (BACKEND)",
	Description: "\"try to be a NAS-like CMS\"",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
